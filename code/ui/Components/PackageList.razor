@using System.Threading.Tasks;
@using System.Collections.Generic;
@using Sandbox;
@using System;
@using Sandbox.UI;
@using Sandmod.Permission;
@inherits Panel;

<root class="package-list">
	@foreach ( var package in Packages )
	{
		<PackageIcon Package=@package OnIconPressed=@(() => OnIconPressed?.Invoke( package ))></PackageIcon>
	}
</root>


@code
{
	/// <summary>
	/// A list of found packages
	/// </summary>
	List<Package> Packages = new List<Package>();

	/// <summary>
	/// What happens when someone clicks on an icon
	/// </summary>
	public Action<Package> OnIconPressed { get; set; }

	/// <summary>
	/// The string used to query for packages
	/// </summary>
	public string Query { get; set; }

	public async Task UpdateItems(int offset = 0)
	{
		var found = await Package.FindAsync( Query );
		if (found != null)
		{
			Packages.AddRange(found.Packages.Where(x => {
				if (x.IsMounted()) return true;
				var packageType = x.PackageType == Package.Type.Addon ? "code" : "asset";
				return Game.LocalClient.HasPermission($"package.mount.{packageType}.{x.FullIdent}");
			}));
		}

		StateHasChanged();
	}

	int queryHash = 0;

	public override void Tick()
	{
		base.Tick();

		if (!IsVisible)
			return;

		var hash = System.HashCode.Combine(Query);
		if (queryHash == hash) return;
		queryHash = hash;

		Packages?.Clear();
		RefreshItems();
	}

	public void RefreshItems()
	{
		//Canvas.Clear();

		StateHasChanged();

		_ = UpdateItems();
	}
}